---
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'

import WidgetAbout from './WidgetAbout.astro'
import WidgetPrinciples from './WidgetPrinciples.astro'
import WidgetPhotography from './WidgetPhotography.astro'
import MarqueeServices from './MarqueeServices.astro'

import bg01 from '../assets/img/mieras-portrait-01.jpg' // Image is 1600x900
import bg02 from '../assets/img/mieras-bg-02-grain.png' // Image is 1600x900

// const { bg01 = '/mieras-bg-01.png', bg02 = '/mieras-bg-02.png' } = Astro.props
---

<section class="relative flex overflow-hidden hero">
  <div class="relative background overflow-clip">
    <Image
      src={bg01}
      widths={[240, 540, 720, bg01.width]}
      sizes={`(max-width: 360px) 720px, (max-width: 720px) 1440px, (max-width: 1600px) 2560px, ${bg01.width}px`}
      alt="A description of my image."
      quality="max"
      class="absolute top-0 left-0 object-cover w-full h-full scale-110 bg01 -z-20 mix-blend-hue"
      decoding="async"
    />

    <Image
      src={bg02}
      widths={[240, 540, 720, bg02.width]}
      sizes={`(max-width: 360px) 720px, (max-width: 720px) 1440px, (max-width: 1600px) 2560px, ${bg01.width}px`}
      alt="A description of my image."
      quality="90"
      class="fixed top-0 left-0 object-cover w-full h-full bg02 -z-10 mix-blend-lighten md:absolute"
      decoding="async"
    />
  </div>
  <div class="z-50 flex flex-col justify-between stretch hero__content min-h-max">
    <MarqueeServices />

    <div
      class="container grid items-end justify-end grid-cols-1 gap-8 widgets z-5 stretch md:row-auto md:grid-cols-4 lg:grid-cols-3"
    >
      <WidgetAbout class="col-span-1 about md:col-span-2 lg:col-span-1" />
      <WidgetPrinciples class="col-span-1 principles md:col-span-2 lg:col-span-1" />
      <WidgetPhotography class="col-span-1 photography md:col-span-4 lg:col-span-1" />
    </div>
  </div>
</section>

<style lang="scss">
  .hero {
    min-height: 100vh;
    overflow: hidden;
  }

  .background {
    position: absolute;
    top: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(180deg, #ef8d45 0%, #b3727e 48%, #62426b 100%);
    animation: hue-rotate 12s linear infinite;
    z-index: -1;
  }
  .bg01 {
    -webkit-mix-blend-mode: hue; /* Older Safari versions */
    -moz-mix-blend-mode: hue; /* Older Firefox versions */
    -ms-mix-blend-mode: hue; /* Older IE versions (but mix-blend-mode is not supported in IE) */
    -o-mix-blend-mode: hue; /* Older Opera versions */
    mix-blend-mode: hue; /* Standard property */
  }

  .bg02 {
    -webkit-mix-blend-mode: lighten; /* Older Safari versions */
    -moz-mix-blend-mode: lighten; /* Older Firefox versions */
    -ms-mix-blend-mode: lighten; /* Older IE versions (but mix-blend-mode is not supported in IE) */
    -o-mix-blend-mode: lighten; /* Older Opera versions */
    mix-blend-mode: lighten; /* Standard property */
  }

  .background::after {
    content: '';
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 50%;
    background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #0000009f 100%);
    z-index: 2;
  }

  @keyframes rotate-gradient {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes hue-rotate {
    from {
      -webkit-filter: hue-rotate(0);
      -moz-filter: hue-rotate(0);
      -ms-filter: hue-rotate(0);
      filter: hue-rotate(0);
    }
    to {
      -webkit-filter: hue-rotate(360deg);
      -moz-filter: hue-rotate(360deg);
      -ms-filter: hue-rotate(360deg);
      filter: hue-rotate(360deg);
    }
  }

  .bg01 {
    filter: blur(2vw);
    animation: blur 12s ease-in-out alternate infinite;
  }

  @keyframes blur {
    from {
      -webkit-filter: blur(0);
      -moz-filter: blur(0);
      -ms-filter: blur(0);
      filter: blur(0);
      transform: scale(1);
    }
    to {
      -webkit-filter: blur(2vw);
      -moz-filter: blur(2vw);
      -ms-filter: blur(2vw);
      filter: blur(2vw);
      transform: scale(2);
    }
  }

  .hero__content {
    gap: calc(40vh + 10vw);
  }

  .widgets {
    gap: var(--space-xs);
    padding-bottom: var(--space-xs);
  }

  :global(.widget) {
    background: var(--background);
    border-radius: var(--radius-default);
    padding: var(--space-s);
    overflow: hidden;
  }

  :global(.about) {
    --font-color: #111;
    --background: #f1eeeb;
    --active-bg: #fff;
  }
  :global(.darkmode .about) {
    --font-color: #111;
    --background: #111;
    --active-bg: #000;
  }

  :global(.principles) {
    --text-color: #111;
    --background: #f1eeeb;
    --active-bg: #fff;
  }
  :global(.darkmode .principles) {
    --text-color: #f1eeeb;
    --background: #111 !important;
    --active-bg: #000;
  }

  .principles {
    padding: var(--space-xs);
  }

  @media screen and (max-width: 768px) {
    .background {
      animation: none;
    }

    .background::after {
      background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 20%, rgba(0, 0, 0, 0.9) 100%);
    }

    .bg01 {
      filter: blur(2vw);
      animation: none;
    }
  }
</style>
